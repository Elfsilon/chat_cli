// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/internal/chat/gen/ent/chat"
	"server/internal/chat/gen/ent/chatmessage"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChatMessage is the model entity for the ChatMessage schema.
type ChatMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Userid holds the value of the "userid" field.
	Userid int `json:"userid,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatMessageQuery when eager-loading is set.
	Edges             ChatMessageEdges `json:"edges"`
	chat_chat_message *int
	selectValues      sql.SelectValues
}

// ChatMessageEdges holds the relations/edges for other nodes in the graph.
type ChatMessageEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Chat `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatMessageEdges) OwnerOrErr() (*Chat, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: chat.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatmessage.FieldID, chatmessage.FieldUserid:
			values[i] = new(sql.NullInt64)
		case chatmessage.FieldUsername, chatmessage.FieldMessage:
			values[i] = new(sql.NullString)
		case chatmessage.FieldTime:
			values[i] = new(sql.NullTime)
		case chatmessage.ForeignKeys[0]: // chat_chat_message
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatMessage fields.
func (cm *ChatMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int(value.Int64)
		case chatmessage.FieldUserid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userid", values[i])
			} else if value.Valid {
				cm.Userid = int(value.Int64)
			}
		case chatmessage.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				cm.Username = value.String
			}
		case chatmessage.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				cm.Message = value.String
			}
		case chatmessage.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				cm.Time = value.Time
			}
		case chatmessage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field chat_chat_message", value)
			} else if value.Valid {
				cm.chat_chat_message = new(int)
				*cm.chat_chat_message = int(value.Int64)
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatMessage.
// This includes values selected through modifiers, order, etc.
func (cm *ChatMessage) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the ChatMessage entity.
func (cm *ChatMessage) QueryOwner() *ChatQuery {
	return NewChatMessageClient(cm.config).QueryOwner(cm)
}

// Update returns a builder for updating this ChatMessage.
// Note that you need to call ChatMessage.Unwrap() before calling this method if this ChatMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *ChatMessage) Update() *ChatMessageUpdateOne {
	return NewChatMessageClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the ChatMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *ChatMessage) Unwrap() *ChatMessage {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatMessage is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *ChatMessage) String() string {
	var builder strings.Builder
	builder.WriteString("ChatMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("userid=")
	builder.WriteString(fmt.Sprintf("%v", cm.Userid))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(cm.Username)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(cm.Message)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(cm.Time.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChatMessages is a parsable slice of ChatMessage.
type ChatMessages []*ChatMessage
